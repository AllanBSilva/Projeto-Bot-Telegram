from telegram import Update
from telegram.ext import CallbackContext


async def menu_router(update: Update, context: CallbackContext) -> None:
    if "quiz_question" in context.user_data:
        return

    text = update.message.text

    if text == "üìÖ Pr√≥ximos Jogos":
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, action="typing"
        )
        from .schedule import schedule_handler

        await schedule_handler(update, context)

    elif text == "üìä Resultados":
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, action="typing"
        )
        from .results import results_handler

        await results_handler(update, context)

    elif text == "üéØ Jogadores":
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, action="typing"
        )
        from .players import players_handler

        await players_handler(update, context)

    elif text == "üó£Ô∏è Frases":
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, action="typing"
        )
        from .quotes import quotes_handler

        await quotes_handler(update, context)

    elif text == "üõí Loja":
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, action="typing"
        )
        from .store import store_handler

        await store_handler(update, context)

    elif text == "‚ÑπÔ∏è Ajuda":
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, action="typing"
        )
        from .help import help_handler

        await help_handler(update, context)

    elif text == "üî• Ao Vivo":
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, action="typing"
        )
        from .live import live_handler

        await live_handler(update, context)

    elif text == "‚ùì Quiz":
        await update.message.reply_text(
            "üß† Iniciando quiz...\nUse o comando /quiz para come√ßar!"
        )

    elif text == "üè† Voltar ao Menu":
        from .start import start_handler

        await start_handler(update, context)
    else:
        await update.message.reply_text(
            "‚ùå Comando n√£o reconhecido. Por favor, escolha uma op√ß√£o do menu."
        )


async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    await query.answer()

    if data == "go_quiz":
        from app.handlers.quiz import start_quiz

        await start_quiz(update, context)

    elif data.startswith("next_player_") or data.startswith("back_player_"):
        try:
            page = int(data.split("_")[-1])
            context.args = [str(page)]
            from .players import players_handler

            await players_handler(update, context)
        except ValueError:
            await query.answer("P√°gina inv√°lida.")

    elif data == "back_to_main":
        from .start import start_handler

        await start_handler(update, context)

    elif data.startswith("next_") or data.startswith("back_"):
        try:
            page = int(data.split("_")[-1])
            context.args = [str(page)]
            from .schedule import schedule_handler

            await schedule_handler(update, context)
        except ValueError:
            await query.answer("P√°gina inv√°lida.")

    elif data == "go_schedule":
        context.args = ["1"]
        from .schedule import schedule_handler

        await schedule_handler(update, context)

    elif data == "go_results":
        context.args = ["1"]
        from .results import results_handler

        await results_handler(update, context)

    elif data == "go_players":
        context.args = ["1"]
        from .players import players_handler

        await players_handler(update, context)

    elif data == "go_quotes":
        from .quotes import quotes_handler

        await quotes_handler(update, context)

    elif data == "go_store":
        from .store import store_handler

        await store_handler(update, context)

    elif data == "go_live":
        from .live import live_handler

        await live_handler(update, context)

    elif data == "go_help":
        from app.handlers.help import help_handler

        await help_handler(update, context)

    elif data.startswith("remind_"):
        if data == "remind_activate":
            from .schedule import schedule_handler

            await schedule_handler(update, context)

        elif data == "remind_deactivate":
            from .reminder import clear_reminder

            await clear_reminder(update, context)

        elif data == "remind_view":
            from .reminder import view_reminder

            await view_reminder(update, context)

        else:
            try:
                game_index = int(data.split("_")[1])
                from .reminder import schedule_specific_reminder

                await schedule_specific_reminder(update, context, game_index)
            except (ValueError, IndexError):
                await query.answer("ID do jogo inv√°lido.")

    elif query.data.startswith("next_"):
        page = int(query.data.split("_")[1])
        context.args = [str(page)]
        await schedule_handler(update, context)

    elif query.data.startswith("back_"):
        page = int(query.data.split("_")[1])
        context.args = [str(page)]
        await schedule_handler(update, context)

    elif query.data == "back_to_main":
        await query.edit_message_text("üîô Voc√™ voltou ao menu principal.")

    elif data == "go_reminder":
        from .reminder import show_reminders_menu

        await show_reminders_menu(update, context)
    else:
        await query.answer("A√ß√£o desconhecida.")
